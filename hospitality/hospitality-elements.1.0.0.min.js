class HTMLIoTAudioElement extends HTMLElement{constructor(){super()}}class HTMLIoTButtonElement extends HTMLElement{constructor(){super()}}class HTMLIoTCurtainElement extends HTMLElement{constructor(){super()}}class HTMLIoTDoorElement extends HTMLElement{constructor(){super(),this._lastLockedState=null}static get observedAttributes(){return["locked"]}attributeChangedCallback(t,e,o){if("locked"===t){const t=this.locked;this._lastLockedState!==t&&(this._lastLockedState=t,this.dispatchEvent(new Event("change",{bubbles:!0})))}}get locked(){return this.hasAttribute("locked")}set locked(t){t?this.setAttribute("locked",""):this.removeAttribute("locked")}}class HTMLIoTLampElement extends HTMLElement{constructor(){super()}}class HTMLIoTRoomElement extends HTMLElement{constructor(){super()}}class HTMLIoTVideoElement extends HTMLElement{constructor(){super()}}class HTMLIoTWindowElement extends HTMLElement{constructor(){super()}}const hospitalityElements=new HTMLElementCollection;hospitalityElements.add("iot-audio",HTMLIoTAudioElement),hospitalityElements.add("iot-button",HTMLIoTButtonElement),hospitalityElements.add("iot-curtain",HTMLIoTCurtainElement),hospitalityElements.add("iot-door",HTMLIoTDoorElement),hospitalityElements.add("iot-lamp",HTMLIoTLampElement),hospitalityElements.add("iot-room",HTMLIoTRoomElement),hospitalityElements.add("iot-video",HTMLIoTVideoElement),hospitalityElements.add("iot-window",HTMLIoTWindowElement);